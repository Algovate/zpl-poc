/**
 * BrowserPrint Service Test Suite
 * Run this to test the BrowserPrint service functionality
 */

import { browserPrintService, BrowserPrintConfig } from './browser-print-service'

export class BrowserPrintTestSuite {
  private results: Array<{ test: string; passed: boolean; message: string }> = []

  async runAllTests(): Promise<void> {
    console.log('üß™ Starting BrowserPrint Service Tests...\n')

    await this.testGetAvailablePrinters()
    await this.testGenerateZPL()
    await this.testPrintHTML()
    await this.testPrintText()
    await this.testPrintZPLPreview()
    await this.testPrinterConnection()
    await this.testSendZPLToPrinter()

    this.printResults()
  }

  private async testGetAvailablePrinters(): Promise<void> {
    try {
      console.log('üìã Testing getAvailablePrinters...')
      const printers = await browserPrintService.getAvailablePrinters()
      
      if (Array.isArray(printers) && printers.length > 0) {
        this.addResult('getAvailablePrinters', true, `Found ${printers.length} printers`)
        console.log(`‚úÖ Found printers: ${printers.join(', ')}`)
      } else {
        this.addResult('getAvailablePrinters', false, 'No printers found')
        console.log('‚ùå No printers found')
      }
    } catch (error) {
      this.addResult('getAvailablePrinters', false, `Error: ${error}`)
      console.log(`‚ùå Error: ${error}`)
    }
    console.log('')
  }

  private async testGenerateZPL(): Promise<void> {
    try {
      console.log('üè∑Ô∏è Testing generateZPL...')
      const content = {
        title: 'Test Label',
        description: 'Generated by test suite'
      }
      
      const zpl = browserPrintService.generateZPL(content)
      
      if (zpl && zpl.includes('^XA') && zpl.includes('^XZ')) {
        this.addResult('generateZPL', true, 'ZPL generated successfully')
        console.log('‚úÖ ZPL generated successfully')
        console.log('Generated ZPL:', zpl)
      } else {
        this.addResult('generateZPL', false, 'Invalid ZPL format')
        console.log('‚ùå Invalid ZPL format')
      }
    } catch (error) {
      this.addResult('generateZPL', false, `Error: ${error}`)
      console.log(`‚ùå Error: ${error}`)
    }
    console.log('')
  }

  private async testPrintHTML(): Promise<void> {
    try {
      console.log('üñ®Ô∏è Testing printHTML...')
      const html = '<h1>Test HTML Print</h1><p>This is a test print job.</p>'
      const config: BrowserPrintConfig = {
        orientation: 'portrait',
        paperSize: 'A4'
      }
      
      const result = await browserPrintService.printHTML(html, config)
      
      if (result) {
        this.addResult('printHTML', true, 'HTML print initiated successfully')
        console.log('‚úÖ HTML print initiated successfully')
      } else {
        this.addResult('printHTML', false, 'HTML print failed')
        console.log('‚ùå HTML print failed')
      }
    } catch (error) {
      this.addResult('printHTML', false, `Error: ${error}`)
      console.log(`‚ùå Error: ${error}`)
    }
    console.log('')
  }

  private async testPrintText(): Promise<void> {
    try {
      console.log('üìÑ Testing printText...')
      const text = 'Test Text Print\nThis is a test text print job.\nGenerated at: ' + new Date().toLocaleString()
      const config: BrowserPrintConfig = {
        orientation: 'portrait',
        paperSize: 'A4'
      }
      
      const result = await browserPrintService.printText(text, config)
      
      if (result) {
        this.addResult('printText', true, 'Text print initiated successfully')
        console.log('‚úÖ Text print initiated successfully')
      } else {
        this.addResult('printText', false, 'Text print failed')
        console.log('‚ùå Text print failed')
      }
    } catch (error) {
      this.addResult('printText', false, `Error: ${error}`)
      console.log(`‚ùå Error: ${error}`)
    }
    console.log('')
  }

  private async testPrintZPLPreview(): Promise<void> {
    try {
      console.log('üîç Testing printZPLPreview...')
      const zpl = `^XA
^MMT
^PW800
^LL600
^LS0
^FO50,50^ADN,36,20^FDTest ZPL Preview^FS
^XZ`
      
      const result = await browserPrintService.printZPLPreview(zpl)
      
      if (result) {
        this.addResult('printZPLPreview', true, 'ZPL preview print initiated successfully')
        console.log('‚úÖ ZPL preview print initiated successfully')
      } else {
        this.addResult('printZPLPreview', false, 'ZPL preview print failed')
        console.log('‚ùå ZPL preview print failed')
      }
    } catch (error) {
      this.addResult('printZPLPreview', false, `Error: ${error}`)
      console.log(`‚ùå Error: ${error}`)
    }
    console.log('')
  }

  private async testPrinterConnection(): Promise<void> {
    try {
      console.log('üîó Testing printer connection...')
      const testPrinter = 'Test Printer'
      
      const result = await browserPrintService.testPrinterConnection(testPrinter)
      
      if (typeof result === 'boolean') {
        this.addResult('testPrinterConnection', true, `Connection test completed: ${result ? 'Success' : 'Failed'}`)
        console.log(`‚úÖ Connection test completed: ${result ? 'Success' : 'Failed'}`)
      } else {
        this.addResult('testPrinterConnection', false, 'Invalid return type')
        console.log('‚ùå Invalid return type')
      }
    } catch (error) {
      this.addResult('testPrinterConnection', false, `Error: ${error}`)
      console.log(`‚ùå Error: ${error}`)
    }
    console.log('')
  }

  private async testSendZPLToPrinter(): Promise<void> {
    try {
      console.log('üì° Testing sendZPLToPrinter...')
      const zpl = `^XA
^MMT
^PW800
^LL600
^LS0
^FO50,50^ADN,36,20^FDTest ZPL Send^FS
^XZ`
      
      const printerConfig = {
        host: '192.168.1.100',
        port: 9100,
        name: 'Test Printer'
      }
      
      const result = await browserPrintService.sendZPLToPrinter(zpl, printerConfig)
      
      if (typeof result === 'boolean') {
        this.addResult('sendZPLToPrinter', true, `ZPL send completed: ${result ? 'Success' : 'Failed'}`)
        console.log(`‚úÖ ZPL send completed: ${result ? 'Success' : 'Failed'}`)
      } else {
        this.addResult('sendZPLToPrinter', false, 'Invalid return type')
        console.log('‚ùå Invalid return type')
      }
    } catch (error) {
      this.addResult('sendZPLToPrinter', false, `Error: ${error}`)
      console.log(`‚ùå Error: ${error}`)
    }
    console.log('')
  }

  private addResult(test: string, passed: boolean, message: string): void {
    this.results.push({ test, passed, message })
  }

  private printResults(): void {
    console.log('üìä Test Results Summary:')
    console.log('========================')
    
    const passed = this.results.filter(r => r.passed).length
    const total = this.results.length
    
    this.results.forEach(result => {
      const icon = result.passed ? '‚úÖ' : '‚ùå'
      console.log(`${icon} ${result.test}: ${result.message}`)
    })
    
    console.log('\nüìà Overall Results:')
    console.log(`Passed: ${passed}/${total} (${Math.round((passed/total) * 100)}%)`)
    
    if (passed === total) {
      console.log('üéâ All tests passed! BrowserPrint service is working correctly.')
    } else {
      console.log('‚ö†Ô∏è Some tests failed. Please check the implementation.')
    }
  }
}

// Export test runner function
export async function runBrowserPrintTests(): Promise<void> {
  const testSuite = new BrowserPrintTestSuite()
  await testSuite.runAllTests()
}

// Auto-run tests if this file is executed directly
if (typeof window !== 'undefined') {
  // Browser environment - expose test function globally
  (window as any).runBrowserPrintTests = runBrowserPrintTests
}
