"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { browserPrintService, BrowserPrintConfig, PrintJob } from "@/lib/browser-print-service"
import { runBrowserPrintTests } from "@/lib/browser-print-test"

export default function BrowserPrintTestPage() {
  const [printContent, setPrintContent] = useState({
    title: 'Test Print Job',
    description: 'This is a test print job generated by BrowserPrint Service',
    zpl: `^XA
^MMT
^PW800
^LL600
^LS0
^BY3,3,50
^FO50,50^ADN,36,20^FDTest Label^FS
^FO50,100^ADN,24,12^FDGenerated by BrowserPrint^FS
^FO50,150^ADN,18,9^FD${new Date().toLocaleString()}^FS
^XZ`
  })

  const [config, setConfig] = useState<BrowserPrintConfig>({
    printerName: '',
    copies: 1,
    orientation: 'portrait',
    paperSize: 'A4',
    margins: { top: 20, right: 20, bottom: 20, left: 20 }
  })

  const [availablePrinters, setAvailablePrinters] = useState<string[]>([])
  const [printJobs, setPrintJobs] = useState<PrintJob[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [testResults, setTestResults] = useState<Record<string, boolean>>({})

  // Load available printers on component mount
  useEffect(() => {
    loadPrinters()
    setPrintJobs(browserPrintService.getAllPrintJobs())
  }, [])

  const loadPrinters = async () => {
    setIsLoading(true)
    try {
      const printers = await browserPrintService.getAvailablePrinters()
      setAvailablePrinters(printers)
    } catch (error) {
      console.error('Failed to load printers:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const testPrinterConnection = async (printerName: string) => {
    setIsLoading(true)
    try {
      const success = await browserPrintService.testPrinterConnection(printerName)
      setTestResults(prev => ({ ...prev, [printerName]: success }))
    } catch (error) {
      console.error('Printer test failed:', error)
      setTestResults(prev => ({ ...prev, [printerName]: false }))
    } finally {
      setIsLoading(false)
    }
  }

  const handlePrintHTML = async () => {
    setIsLoading(true)
    try {
      const html = `
        <div style="text-align: center; padding: 40px;">
          <h1 style="color: #2563eb; margin-bottom: 20px;">${printContent.title}</h1>
          <p style="font-size: 16px; margin-bottom: 30px;">${printContent.description}</p>
          <div style="border: 2px solid #2563eb; padding: 20px; margin: 20px 0;">
            <h3>Print Configuration</h3>
            <p><strong>Orientation:</strong> ${config.orientation}</p>
            <p><strong>Paper Size:</strong> ${config.paperSize}</p>
            <p><strong>Copies:</strong> ${config.copies}</p>
          </div>
          <p style="color: #666; margin-top: 30px;">Generated on: ${new Date().toLocaleString()}</p>
        </div>
      `
      
      const success = await browserPrintService.printHTML(html, config)
      if (success) {
        alert('HTML print job sent successfully!')
      } else {
        alert('HTML print job failed!')
      }
    } catch (error) {
      console.error('Print failed:', error)
      alert('Print job failed!')
    } finally {
      setIsLoading(false)
    }
  }

  const handlePrintText = async () => {
    setIsLoading(true)
    try {
      const text = `${printContent.title}\n\n${printContent.description}\n\nGenerated: ${new Date().toLocaleString()}`
      const success = await browserPrintService.printText(text, config)
      if (success) {
        alert('Text print job sent successfully!')
      } else {
        alert('Text print job failed!')
      }
    } catch (error) {
      console.error('Print failed:', error)
      alert('Print job failed!')
    } finally {
      setIsLoading(false)
    }
  }

  const handlePrintZPL = async () => {
    setIsLoading(true)
    try {
      const success = await browserPrintService.printZPLPreview(printContent.zpl, config)
      if (success) {
        alert('ZPL preview print job sent successfully!')
      } else {
        alert('ZPL preview print job failed!')
      }
    } catch (error) {
      console.error('Print failed:', error)
      alert('Print job failed!')
    } finally {
      setIsLoading(false)
    }
  }

  const handleSendZPLToPrinter = async () => {
    if (!config.printerName) {
      alert('Please select a printer first')
      return
    }

    setIsLoading(true)
    try {
      const printerConfig = {
        host: '192.168.1.100',
        port: 9100,
        name: config.printerName
      }
      
      const success = await browserPrintService.sendZPLToPrinter(printContent.zpl, printerConfig)
      if (success) {
        alert(`ZPL sent successfully to ${config.printerName}!`)
      } else {
        alert(`Failed to send ZPL to ${config.printerName}!`)
      }
    } catch (error) {
      console.error('ZPL send failed:', error)
      alert('ZPL send failed!')
    } finally {
      setIsLoading(false)
    }
  }

  const generateTestZPL = () => {
    const newZPL = browserPrintService.generateZPL(printContent)
    setPrintContent(prev => ({ ...prev, zpl: newZPL }))
  }

  const runTestSuite = async () => {
    setIsLoading(true)
    try {
      await runBrowserPrintTests()
      alert('Test suite completed! Check the browser console for detailed results.')
    } catch (error) {
      console.error('Test suite failed:', error)
      alert('Test suite failed! Check the browser console for details.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 p-8">
      <div className="container mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-green-500 to-blue-600 rounded-2xl mb-4 shadow-lg">
            <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
            </svg>
          </div>
          <h1 className="text-4xl font-bold bg-gradient-to-r from-green-600 via-blue-600 to-indigo-600 bg-clip-text text-transparent">
            BrowserPrint Service Test
          </h1>
          <p className="text-slate-600 text-lg max-w-2xl mx-auto">
            Test browser-based printing functionality including HTML, text, and ZPL printing
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Print Configuration */}
          <Card className="bg-white/90 backdrop-blur-md shadow-xl border border-slate-200">
            <CardHeader>
              <CardTitle className="text-slate-800">Print Configuration</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="printer-select" className="text-slate-600">Select Printer</Label>
                <Select value={config.printerName} onValueChange={(value) => setConfig(prev => ({ ...prev, printerName: value }))}>
                  <SelectTrigger id="printer-select" className="bg-slate-50 border-slate-200 text-slate-800">
                    <SelectValue placeholder="Choose a printer" />
                  </SelectTrigger>
                  <SelectContent>
                    {availablePrinters.map(printer => (
                      <SelectItem key={printer} value={printer}>
                        <div className="flex items-center justify-between w-full">
                          <span>{printer}</span>
                          {testResults[printer] !== undefined && (
                            <Badge variant={testResults[printer] ? "default" : "destructive"} className="ml-2">
                              {testResults[printer] ? "✓" : "✗"}
                            </Badge>
                          )}
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="grid grid-cols-2 gap-3">
                <div>
                  <Label className="text-sm font-medium text-slate-600">Orientation</Label>
                  <Select value={config.orientation} onValueChange={(value) => setConfig(prev => ({ ...prev, orientation: value as 'portrait' | 'landscape' }))}>
                    <SelectTrigger className="h-9 text-sm">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="portrait">Portrait</SelectItem>
                      <SelectItem value="landscape">Landscape</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label className="text-sm font-medium text-slate-600">Paper Size</Label>
                  <Select value={config.paperSize} onValueChange={(value) => setConfig(prev => ({ ...prev, paperSize: value as any }))}>
                    <SelectTrigger className="h-9 text-sm">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="A4">A4</SelectItem>
                      <SelectItem value="A5">A5</SelectItem>
                      <SelectItem value="letter">Letter</SelectItem>
                      <SelectItem value="label">Label</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor="copies" className="text-sm font-medium text-slate-600">Copies</Label>
                <Input
                  id="copies"
                  type="number"
                  min="1"
                  max="10"
                  value={config.copies}
                  onChange={(e) => setConfig(prev => ({ ...prev, copies: parseInt(e.target.value) || 1 }))}
                  className="h-9 text-sm"
                />
              </div>

              <Button 
                onClick={loadPrinters} 
                variant="outline" 
                className="w-full bg-slate-50 border-slate-200 text-slate-700 hover:bg-slate-100"
                disabled={isLoading}
              >
                {isLoading ? "Loading..." : "🔄 Refresh Printers"}
              </Button>
            </CardContent>
          </Card>

          {/* Print Content */}
          <Card className="bg-white/90 backdrop-blur-md shadow-xl border border-slate-200">
            <CardHeader>
              <CardTitle className="text-slate-800">Print Content</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="title" className="text-sm font-medium text-slate-600">Title</Label>
                <Input
                  id="title"
                  value={printContent.title}
                  onChange={(e) => setPrintContent(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="Enter print title..."
                  className="h-9 text-sm"
                />
              </div>

              <div>
                <Label htmlFor="description" className="text-sm font-medium text-slate-600">Description</Label>
                <Textarea
                  id="description"
                  value={printContent.description}
                  onChange={(e) => setPrintContent(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Enter print description..."
                  className="h-20 text-sm resize-none"
                />
              </div>

              <div>
                <Label htmlFor="zpl" className="text-sm font-medium text-slate-600">ZPL Command</Label>
                <Textarea
                  id="zpl"
                  value={printContent.zpl}
                  onChange={(e) => setPrintContent(prev => ({ ...prev, zpl: e.target.value }))}
                  placeholder="Enter ZPL commands..."
                  className="h-32 text-xs font-mono resize-none"
                />
              </div>

              <Button 
                onClick={generateTestZPL} 
                variant="outline" 
                className="w-full bg-slate-50 border-slate-200 text-slate-700 hover:bg-slate-100"
              >
                🎲 Generate Test ZPL
              </Button>
            </CardContent>
          </Card>

          {/* Print Actions */}
          <Card className="bg-white/90 backdrop-blur-md shadow-xl border border-slate-200">
            <CardHeader>
              <CardTitle className="text-slate-800">Print Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Button 
                onClick={handlePrintHTML} 
                className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-lg hover:shadow-xl transition-all duration-200"
                disabled={isLoading}
              >
                🖨️ Print HTML
              </Button>

              <Button 
                onClick={handlePrintText} 
                className="w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white shadow-lg hover:shadow-xl transition-all duration-200"
                disabled={isLoading}
              >
                📄 Print Text
              </Button>

              <Button 
                onClick={handlePrintZPL} 
                className="w-full bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white shadow-lg hover:shadow-xl transition-all duration-200"
                disabled={isLoading}
              >
                🏷️ Print ZPL Preview
              </Button>

              <Button 
                onClick={handleSendZPLToPrinter} 
                className="w-full bg-gradient-to-r from-orange-600 to-orange-700 hover:from-orange-700 hover:to-orange-800 text-white shadow-lg hover:shadow-xl transition-all duration-200"
                disabled={isLoading || !config.printerName}
              >
                📡 Send ZPL to Printer
              </Button>

              <div className="pt-4 border-t border-slate-200 space-y-3">
                <Label className="text-sm font-medium text-slate-600 mb-2 block">Test Printer Connection</Label>
                <Select onValueChange={testPrinterConnection}>
                  <SelectTrigger className="bg-slate-50 border-slate-200 text-slate-800">
                    <SelectValue placeholder="Select printer to test" />
                  </SelectTrigger>
                  <SelectContent>
                    {availablePrinters.map(printer => (
                      <SelectItem key={printer} value={printer}>
                        {printer}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <Button 
                  onClick={runTestSuite} 
                  className="w-full bg-gradient-to-r from-indigo-600 to-purple-700 hover:from-indigo-700 hover:to-purple-800 text-white shadow-lg hover:shadow-xl transition-all duration-200"
                  disabled={isLoading}
                >
                  🧪 Run Full Test Suite
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Print Jobs Status */}
        {printJobs.length > 0 && (
          <Card className="bg-white/90 backdrop-blur-md shadow-xl border border-slate-200">
            <CardHeader>
              <CardTitle className="text-slate-800">Print Jobs Status</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {printJobs.map((job) => (
                  <div key={job.id} className="flex items-center justify-between p-3 border border-slate-200 rounded-lg bg-slate-50">
                    <div>
                      <div className="font-medium text-sm text-slate-800">{job.id}</div>
                      <div className="text-xs text-slate-600">{job.type.toUpperCase()} • {job.timestamp.toLocaleString()}</div>
                    </div>
                    <Badge 
                      variant={
                        job.status === 'completed' ? 'default' :
                        job.status === 'failed' ? 'destructive' :
                        job.status === 'printing' ? 'secondary' : 'outline'
                      }
                    >
                      {job.status}
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Loading Overlay */}
        {isLoading && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 shadow-xl">
              <div className="flex items-center space-x-3">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                <span className="text-slate-700">Processing print job...</span>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
